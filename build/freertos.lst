ARM GAS  /tmp/cckLxVSS.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"freertos.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.StartDefaultTask,"ax",%progbits
  18              		.align	1
  19              		.global	StartDefaultTask
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	StartDefaultTask:
  27              	.LFB140:
  28              		.file 1 "Core/Src/freertos.c"
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****   ******************************************************************************
   4:Core/Src/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****   ******************************************************************************
   7:Core/Src/freertos.c ****   * @attention
   8:Core/Src/freertos.c ****   *
   9:Core/Src/freertos.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/freertos.c ****   * All rights reserved.
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/freertos.c ****   * in the root directory of this software component.
  14:Core/Src/freertos.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/freertos.c ****   *
  16:Core/Src/freertos.c ****   ******************************************************************************
  17:Core/Src/freertos.c ****   */
  18:Core/Src/freertos.c **** /* USER CODE END Header */
  19:Core/Src/freertos.c **** 
  20:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/freertos.c **** #include "FreeRTOS.h"
  22:Core/Src/freertos.c **** #include "task.h"
  23:Core/Src/freertos.c **** #include "main.h"
  24:Core/Src/freertos.c **** #include "cmsis_os.h"
  25:Core/Src/freertos.c **** 
  26:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  27:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/freertos.c **** 
  29:Core/Src/freertos.c **** /* USER CODE END Includes */
  30:Core/Src/freertos.c **** 
ARM GAS  /tmp/cckLxVSS.s 			page 2


  31:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/freertos.c **** typedef StaticTask_t osStaticThreadDef_t;
  33:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  34:Core/Src/freertos.c **** 
  35:Core/Src/freertos.c **** /* USER CODE END PTD */
  36:Core/Src/freertos.c **** 
  37:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  38:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  39:Core/Src/freertos.c **** 
  40:Core/Src/freertos.c **** /* USER CODE END PD */
  41:Core/Src/freertos.c **** 
  42:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  44:Core/Src/freertos.c **** 
  45:Core/Src/freertos.c **** /* USER CODE END PM */
  46:Core/Src/freertos.c **** 
  47:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  49:Core/Src/freertos.c **** 
  50:Core/Src/freertos.c **** /* USER CODE END Variables */
  51:Core/Src/freertos.c **** /* Definitions for defaultTask */
  52:Core/Src/freertos.c **** osThreadId_t defaultTaskHandle;
  53:Core/Src/freertos.c **** uint32_t defaultTaskBuffer[ 128 ];
  54:Core/Src/freertos.c **** osStaticThreadDef_t defaultTaskControlBlock;
  55:Core/Src/freertos.c **** const osThreadAttr_t defaultTask_attributes = {
  56:Core/Src/freertos.c ****   .name = "defaultTask",
  57:Core/Src/freertos.c ****   .cb_mem = &defaultTaskControlBlock,
  58:Core/Src/freertos.c ****   .cb_size = sizeof(defaultTaskControlBlock),
  59:Core/Src/freertos.c ****   .stack_mem = &defaultTaskBuffer[0],
  60:Core/Src/freertos.c ****   .stack_size = sizeof(defaultTaskBuffer),
  61:Core/Src/freertos.c ****   .priority = (osPriority_t) osPriorityNormal,
  62:Core/Src/freertos.c **** };
  63:Core/Src/freertos.c **** 
  64:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  65:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  66:Core/Src/freertos.c **** 
  67:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  68:Core/Src/freertos.c **** 
  69:Core/Src/freertos.c **** void StartDefaultTask(void *argument);
  70:Core/Src/freertos.c **** 
  71:Core/Src/freertos.c **** extern void MX_USB_DEVICE_Init(void);
  72:Core/Src/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
  73:Core/Src/freertos.c **** 
  74:Core/Src/freertos.c **** /* USER CODE BEGIN PREPOSTSLEEP */
  75:Core/Src/freertos.c **** /** @see sleep.c */
  76:Core/Src/freertos.c **** /* USER CODE END PREPOSTSLEEP */
  77:Core/Src/freertos.c **** 
  78:Core/Src/freertos.c **** /**
  79:Core/Src/freertos.c ****   * @brief  FreeRTOS initialization
  80:Core/Src/freertos.c ****   * @param  None
  81:Core/Src/freertos.c ****   * @retval None
  82:Core/Src/freertos.c ****   */
  83:Core/Src/freertos.c **** void MX_FREERTOS_Init(void) {
  84:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
  85:Core/Src/freertos.c **** 
  86:Core/Src/freertos.c ****   /* USER CODE END Init */
  87:Core/Src/freertos.c **** 
ARM GAS  /tmp/cckLxVSS.s 			page 3


  88:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
  89:Core/Src/freertos.c ****   /* add mutexes, ... */
  90:Core/Src/freertos.c ****   /* USER CODE END RTOS_MUTEX */
  91:Core/Src/freertos.c **** 
  92:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
  93:Core/Src/freertos.c ****   /* add semaphores, ... */
  94:Core/Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
  95:Core/Src/freertos.c **** 
  96:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
  97:Core/Src/freertos.c ****   /* start timers, add new ones, ... */
  98:Core/Src/freertos.c ****   /* USER CODE END RTOS_TIMERS */
  99:Core/Src/freertos.c **** 
 100:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 101:Core/Src/freertos.c ****   /* add queues, ... */
 102:Core/Src/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 103:Core/Src/freertos.c **** 
 104:Core/Src/freertos.c ****   /* Create the thread(s) */
 105:Core/Src/freertos.c ****   /* creation of defaultTask */
 106:Core/Src/freertos.c ****   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 107:Core/Src/freertos.c **** 
 108:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 109:Core/Src/freertos.c ****   extern actor_t* ACTORS_LIST_SystemRegistry[MAX_ACTORS];
 110:Core/Src/freertos.c ****   /* add threads, ... */
 111:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[CRON_ACTOR_ID]                         = CRON_ActorInit();
 112:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[PWRM_MANAGER_ACTOR_ID]                 = PWRM_MANAGER_ActorInit();
 113:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[TEMPERATURE_HUMIDITY_SENSOR_ACTOR_ID]  = TH_SENS_TaskInit();
 114:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[LIGHT_SENSOR_ACTOR_ID]                 = LIGHT_SENS_TaskInit();
 115:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[MEMORY_ACTOR_ID]                       = MEMORY_TaskInit();
 116:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[NFC_ACTOR_ID]                          = NFC_TaskInit();
 117:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[EV_MANAGER_ACTOR_ID]                   = EV_MANAGER_ActorInit(defaultT
 118:Core/Src/freertos.c ****   // TODO
 119:Core/Src/freertos.c ****   // ACCEL_TaskInit();
 120:Core/Src/freertos.c **** 
 121:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 122:Core/Src/freertos.c **** 
 123:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 124:Core/Src/freertos.c ****   /* add events, ... */
 125:Core/Src/freertos.c ****   /* USER CODE END RTOS_EVENTS */
 126:Core/Src/freertos.c **** 
 127:Core/Src/freertos.c **** }
 128:Core/Src/freertos.c **** 
 129:Core/Src/freertos.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 130:Core/Src/freertos.c **** /**
 131:Core/Src/freertos.c ****   * @brief  Function implementing the defaultTask thread.
 132:Core/Src/freertos.c ****   * @param  argument: Not used
 133:Core/Src/freertos.c ****   * @retval None
 134:Core/Src/freertos.c ****   */
 135:Core/Src/freertos.c **** /* USER CODE END Header_StartDefaultTask */
 136:Core/Src/freertos.c **** void StartDefaultTask(void *argument)
 137:Core/Src/freertos.c **** {
  29              		.loc 1 137 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35              		.loc 1 137 1 is_stmt 0 view .LVU1
ARM GAS  /tmp/cckLxVSS.s 			page 4


  36 0000 00B5     		push	{lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 4
  39              		.cfi_offset 14, -4
  40 0002 85B0     		sub	sp, sp, #20
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 24
  43 0004 03E0     		b	.L2
  44              	.LVL1:
  45              	.L5:
 138:Core/Src/freertos.c ****   /* init code for USB_DEVICE */
 139:Core/Src/freertos.c **** 
 140:Core/Src/freertos.c ****   /* USER CODE BEGIN StartDefaultTask */
 141:Core/Src/freertos.c ****   //  MX_USB_DEVICE_Init();
 142:Core/Src/freertos.c ****   (void) argument; // Avoid unused parameter warning
 143:Core/Src/freertos.c ****   message_t msg;
 144:Core/Src/freertos.c ****   /* Infinite loop */
 145:Core/Src/freertos.c ****   for(;;)
 146:Core/Src/freertos.c ****   {
 147:Core/Src/freertos.c ****     // process event manager messages
 148:Core/Src/freertos.c ****     if (osMessageQueueGet(EV_MANAGER_Actor.super.osMessageQueueId, &msg, NULL, osWaitForever) == os
 149:Core/Src/freertos.c ****       EV_MANAGER_Actor.super.messageHandler(&EV_MANAGER_Actor.super, &msg);
  46              		.loc 1 149 7 is_stmt 1 view .LVU2
  47              		.loc 1 149 29 is_stmt 0 view .LVU3
  48 0006 0748     		ldr	r0, .L6
  49 0008 C368     		ldr	r3, [r0, #12]
  50              		.loc 1 149 7 view .LVU4
  51 000a 01A9     		add	r1, sp, #4
  52 000c 9847     		blx	r3
  53              	.LVL2:
  54              	.L2:
 142:Core/Src/freertos.c ****   message_t msg;
  55              		.loc 1 142 3 is_stmt 1 view .LVU5
 143:Core/Src/freertos.c ****   /* Infinite loop */
  56              		.loc 1 143 3 view .LVU6
 145:Core/Src/freertos.c ****   {
  57              		.loc 1 145 3 view .LVU7
 148:Core/Src/freertos.c ****       EV_MANAGER_Actor.super.messageHandler(&EV_MANAGER_Actor.super, &msg);
  58              		.loc 1 148 5 view .LVU8
 148:Core/Src/freertos.c ****       EV_MANAGER_Actor.super.messageHandler(&EV_MANAGER_Actor.super, &msg);
  59              		.loc 1 148 9 is_stmt 0 view .LVU9
  60 000e 4FF0FF33 		mov	r3, #-1
  61 0012 0022     		movs	r2, #0
  62 0014 01A9     		add	r1, sp, #4
  63 0016 0348     		ldr	r0, .L6
  64 0018 8068     		ldr	r0, [r0, #8]
  65 001a FFF7FEFF 		bl	osMessageQueueGet
  66              	.LVL3:
 148:Core/Src/freertos.c ****       EV_MANAGER_Actor.super.messageHandler(&EV_MANAGER_Actor.super, &msg);
  67              		.loc 1 148 8 view .LVU10
  68 001e 0028     		cmp	r0, #0
  69 0020 F5D1     		bne	.L2
  70 0022 F0E7     		b	.L5
  71              	.L7:
  72              		.align	2
  73              	.L6:
  74 0024 00000000 		.word	EV_MANAGER_Actor
ARM GAS  /tmp/cckLxVSS.s 			page 5


  75              		.cfi_endproc
  76              	.LFE140:
  78              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
  79              		.align	1
  80              		.global	MX_FREERTOS_Init
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu fpv4-sp-d16
  86              	MX_FREERTOS_Init:
  87              	.LFB139:
  83:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
  88              		.loc 1 83 29 is_stmt 1 view -0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92 0000 38B5     		push	{r3, r4, r5, lr}
  93              	.LCFI2:
  94              		.cfi_def_cfa_offset 16
  95              		.cfi_offset 3, -16
  96              		.cfi_offset 4, -12
  97              		.cfi_offset 5, -8
  98              		.cfi_offset 14, -4
 106:Core/Src/freertos.c **** 
  99              		.loc 1 106 3 view .LVU12
 106:Core/Src/freertos.c **** 
 100              		.loc 1 106 23 is_stmt 0 view .LVU13
 101 0002 0F4A     		ldr	r2, .L10
 102 0004 0021     		movs	r1, #0
 103 0006 0F48     		ldr	r0, .L10+4
 104 0008 FFF7FEFF 		bl	osThreadNew
 105              	.LVL4:
 106:Core/Src/freertos.c **** 
 106              		.loc 1 106 21 view .LVU14
 107 000c 0E4D     		ldr	r5, .L10+8
 108 000e 2860     		str	r0, [r5]
 109:Core/Src/freertos.c ****   /* add threads, ... */
 109              		.loc 1 109 3 is_stmt 1 view .LVU15
 111:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[PWRM_MANAGER_ACTOR_ID]                 = PWRM_MANAGER_ActorInit();
 110              		.loc 1 111 3 view .LVU16
 111:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[PWRM_MANAGER_ACTOR_ID]                 = PWRM_MANAGER_ActorInit();
 111              		.loc 1 111 71 is_stmt 0 view .LVU17
 112 0010 FFF7FEFF 		bl	CRON_ActorInit
 113              	.LVL5:
 111:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[PWRM_MANAGER_ACTOR_ID]                 = PWRM_MANAGER_ActorInit();
 114              		.loc 1 111 69 view .LVU18
 115 0014 0D4C     		ldr	r4, .L10+12
 116 0016 A060     		str	r0, [r4, #8]
 112:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[TEMPERATURE_HUMIDITY_SENSOR_ACTOR_ID]  = TH_SENS_TaskInit();
 117              		.loc 1 112 3 is_stmt 1 view .LVU19
 112:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[TEMPERATURE_HUMIDITY_SENSOR_ACTOR_ID]  = TH_SENS_TaskInit();
 118              		.loc 1 112 71 is_stmt 0 view .LVU20
 119 0018 FFF7FEFF 		bl	PWRM_MANAGER_ActorInit
 120              	.LVL6:
 112:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[TEMPERATURE_HUMIDITY_SENSOR_ACTOR_ID]  = TH_SENS_TaskInit();
 121              		.loc 1 112 69 view .LVU21
 122 001c E060     		str	r0, [r4, #12]
ARM GAS  /tmp/cckLxVSS.s 			page 6


 113:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[LIGHT_SENSOR_ACTOR_ID]                 = LIGHT_SENS_TaskInit();
 123              		.loc 1 113 3 is_stmt 1 view .LVU22
 113:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[LIGHT_SENSOR_ACTOR_ID]                 = LIGHT_SENS_TaskInit();
 124              		.loc 1 113 71 is_stmt 0 view .LVU23
 125 001e FFF7FEFF 		bl	TH_SENS_TaskInit
 126              	.LVL7:
 113:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[LIGHT_SENSOR_ACTOR_ID]                 = LIGHT_SENS_TaskInit();
 127              		.loc 1 113 69 view .LVU24
 128 0022 A061     		str	r0, [r4, #24]
 114:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[MEMORY_ACTOR_ID]                       = MEMORY_TaskInit();
 129              		.loc 1 114 3 is_stmt 1 view .LVU25
 114:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[MEMORY_ACTOR_ID]                       = MEMORY_TaskInit();
 130              		.loc 1 114 71 is_stmt 0 view .LVU26
 131 0024 FFF7FEFF 		bl	LIGHT_SENS_TaskInit
 132              	.LVL8:
 114:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[MEMORY_ACTOR_ID]                       = MEMORY_TaskInit();
 133              		.loc 1 114 69 view .LVU27
 134 0028 E061     		str	r0, [r4, #28]
 115:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[NFC_ACTOR_ID]                          = NFC_TaskInit();
 135              		.loc 1 115 3 is_stmt 1 view .LVU28
 115:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[NFC_ACTOR_ID]                          = NFC_TaskInit();
 136              		.loc 1 115 71 is_stmt 0 view .LVU29
 137 002a FFF7FEFF 		bl	MEMORY_TaskInit
 138              	.LVL9:
 115:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[NFC_ACTOR_ID]                          = NFC_TaskInit();
 139              		.loc 1 115 69 view .LVU30
 140 002e 2062     		str	r0, [r4, #32]
 116:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[EV_MANAGER_ACTOR_ID]                   = EV_MANAGER_ActorInit(defaultT
 141              		.loc 1 116 3 is_stmt 1 view .LVU31
 116:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[EV_MANAGER_ACTOR_ID]                   = EV_MANAGER_ActorInit(defaultT
 142              		.loc 1 116 71 is_stmt 0 view .LVU32
 143 0030 FFF7FEFF 		bl	NFC_TaskInit
 144              	.LVL10:
 116:Core/Src/freertos.c ****   ACTORS_LIST_SystemRegistry[EV_MANAGER_ACTOR_ID]                   = EV_MANAGER_ActorInit(defaultT
 145              		.loc 1 116 69 view .LVU33
 146 0034 2061     		str	r0, [r4, #16]
 117:Core/Src/freertos.c ****   // TODO
 147              		.loc 1 117 3 is_stmt 1 view .LVU34
 117:Core/Src/freertos.c ****   // TODO
 148              		.loc 1 117 71 is_stmt 0 view .LVU35
 149 0036 2868     		ldr	r0, [r5]
 150 0038 FFF7FEFF 		bl	EV_MANAGER_ActorInit
 151              	.LVL11:
 117:Core/Src/freertos.c ****   // TODO
 152              		.loc 1 117 69 view .LVU36
 153 003c 6060     		str	r0, [r4, #4]
 127:Core/Src/freertos.c **** 
 154              		.loc 1 127 1 view .LVU37
 155 003e 38BD     		pop	{r3, r4, r5, pc}
 156              	.L11:
 157              		.align	2
 158              	.L10:
 159 0040 00000000 		.word	.LANCHOR0
 160 0044 00000000 		.word	StartDefaultTask
 161 0048 00000000 		.word	.LANCHOR1
 162 004c 00000000 		.word	ACTORS_LIST_SystemRegistry
 163              		.cfi_endproc
ARM GAS  /tmp/cckLxVSS.s 			page 7


 164              	.LFE139:
 166              		.global	defaultTask_attributes
 167              		.section	.rodata.str1.4,"aMS",%progbits,1
 168              		.align	2
 169              	.LC0:
 170 0000 64656661 		.ascii	"defaultTask\000"
 170      756C7454 
 170      61736B00 
 171              		.global	defaultTaskControlBlock
 172              		.global	defaultTaskBuffer
 173              		.global	defaultTaskHandle
 174              		.section	.bss.defaultTaskBuffer,"aw",%nobits
 175              		.align	2
 178              	defaultTaskBuffer:
 179 0000 00000000 		.space	512
 179      00000000 
 179      00000000 
 179      00000000 
 179      00000000 
 180              		.section	.bss.defaultTaskControlBlock,"aw",%nobits
 181              		.align	2
 184              	defaultTaskControlBlock:
 185 0000 00000000 		.space	92
 185      00000000 
 185      00000000 
 185      00000000 
 185      00000000 
 186              		.section	.bss.defaultTaskHandle,"aw",%nobits
 187              		.align	2
 188              		.set	.LANCHOR1,. + 0
 191              	defaultTaskHandle:
 192 0000 00000000 		.space	4
 193              		.section	.rodata.defaultTask_attributes,"a"
 194              		.align	2
 195              		.set	.LANCHOR0,. + 0
 198              	defaultTask_attributes:
 199 0000 00000000 		.word	.LC0
 200 0004 00000000 		.space	4
 201 0008 00000000 		.word	defaultTaskControlBlock
 202 000c 5C000000 		.word	92
 203 0010 00000000 		.word	defaultTaskBuffer
 204 0014 00020000 		.word	512
 205 0018 18000000 		.word	24
 206 001c 00000000 		.space	8
 206      00000000 
 207              		.text
 208              	.Letext0:
 209              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 210              		.file 3 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 211              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 212              		.file 5 "/usr/include/newlib/sys/_types.h"
 213              		.file 6 "/usr/include/newlib/sys/types.h"
 214              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 215              		.file 8 "app/core/actor/../config/events_list/events_list.h"
 216              		.file 9 "app/core/actor/../config/actors_list/actors_list.h"
 217              		.file 10 "app/core/actor/actor.h"
 218              		.file 11 "app/tasks/event_manager/event_manager.h"
ARM GAS  /tmp/cckLxVSS.s 			page 8


 219              		.file 12 "app/core/cron/cron.h"
 220              		.file 13 "app/core/power_mode_manager/power_mode_manager.h"
 221              		.file 14 "app/tasks/temperature_humidity_sensor/temperature_humidity_sensor.h"
 222              		.file 15 "app/tasks/light_sensor/light_sensor.h"
 223              		.file 16 "app/tasks/memory/memory.h"
 224              		.file 17 "app/tasks/nfc/nfc.h"
ARM GAS  /tmp/cckLxVSS.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
     /tmp/cckLxVSS.s:18     .text.StartDefaultTask:0000000000000000 $t
     /tmp/cckLxVSS.s:26     .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/cckLxVSS.s:74     .text.StartDefaultTask:0000000000000024 $d
     /tmp/cckLxVSS.s:79     .text.MX_FREERTOS_Init:0000000000000000 $t
     /tmp/cckLxVSS.s:86     .text.MX_FREERTOS_Init:0000000000000000 MX_FREERTOS_Init
     /tmp/cckLxVSS.s:159    .text.MX_FREERTOS_Init:0000000000000040 $d
     /tmp/cckLxVSS.s:198    .rodata.defaultTask_attributes:0000000000000000 defaultTask_attributes
     /tmp/cckLxVSS.s:168    .rodata.str1.4:0000000000000000 $d
     /tmp/cckLxVSS.s:184    .bss.defaultTaskControlBlock:0000000000000000 defaultTaskControlBlock
     /tmp/cckLxVSS.s:178    .bss.defaultTaskBuffer:0000000000000000 defaultTaskBuffer
     /tmp/cckLxVSS.s:191    .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/cckLxVSS.s:175    .bss.defaultTaskBuffer:0000000000000000 $d
     /tmp/cckLxVSS.s:181    .bss.defaultTaskControlBlock:0000000000000000 $d
     /tmp/cckLxVSS.s:187    .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/cckLxVSS.s:194    .rodata.defaultTask_attributes:0000000000000000 $d

UNDEFINED SYMBOLS
osMessageQueueGet
EV_MANAGER_Actor
osThreadNew
CRON_ActorInit
PWRM_MANAGER_ActorInit
TH_SENS_TaskInit
LIGHT_SENS_TaskInit
MEMORY_TaskInit
NFC_TaskInit
EV_MANAGER_ActorInit
ACTORS_LIST_SystemRegistry
